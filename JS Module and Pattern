function solve() {

	var	Course = {
		init: function(title, presentations) {
			if(validateTitle(title)) {
				throw new Error('Invalid title of the Course');
			}
			if(presentations.length<1) {
				throw new Error('No presentations in the Course');
			}
			if(presentations.some(validateTitle)) {
				throw new Error('Invalid title of presentations');
			} 
			this.title=title;
			this.presentations=presentations;
			this.students=[]; 
			return this;
		},
		addStudent: function(name) {
			var names = name.split(" "),
				firstName = names[0],
				lastName = names[1],
				studentID=this.students.length+1;
				student={};
		 		
			if(names.length!==2) {
				throw new Error('Invalid number of names');
			}
			if (!(validateName(firstName)&&validateName(lastName))) {
				throw new Error('Invalid name');
			}
			student.firstname = firstName;
			student.lastname = lastName;
			student.id= studentID;
			student.homeworks=[];
			student.exam = 0;
			student.end = 0;
			this.students.push(student);
			
			return studentID; 
		},
		getAllStudents: function() {  
			return this.students.slice();
		}, 
		submitHomework: function(studentId, homeworkId) {
			var prLen=this.presentations.length,
				student;
			
			if(!this.students.some(function(student){
				return student.id===studentId;})) {
				throw new Error('Invalid studentId');
			}
			if(!this.presentations.some(function(v,i){ 
				return i+1===homeworkId;})) {
				throw new Error('Invalid homeworkId');   
			}
			
			student=this.students[studentId-1];
			if(student.homeworks.indexOf(homeworkId)<0) {
				student.homeworks.push(homeworkId);
				student.end+=25/prLen;
			} 
			return this;    
		}, 
		pushExamResults: function(results) {
			var rLen=results.length,
				students=this.students,
				cheat; 
			
		incorrectScores = results.some(function(result) {
			return typeof result.score !='number';
		});
				
		if(incorrectScores){
			throw new Error('Incorrect type of scores');
		}
			 
		cheat = results.sort(function(a,b){return(a.StudentID-b.StudentID);})
			.filter(function(v,i,o){return i&&v.StudentID==o[i-1].StudentID;
		});
			
		if(cheat.length) {
			throw new Error('There are cheaters: '+cheat);
		}
			
       results.forEach(function(result) {
          var student = students[result.StudentID - 1];
				if(student.exam==0) {
					student.exam = result.score;
					student.end = student.end + 0.75*result.score;
				}
             });
			
		return this; 
		},
		getTopStudents: function() {
			var topStudents,
				students=this.students;
				
			topStudents =students.sort(function(a,b) {return(b.end-a.end);});
			
			students.length>9 ? 
			topStudents = students.filter(function(v,i,o) {
				return v.end>=o[9].end;})
			: topStudents = students
			
			return topStudents.slice();  
		}
	}; 

	return Course;
	
	function validateTitle(title) {
		return (/^\s|\s{2,}|\s$/.test(title)||title.length<1);
	} 

	function validateName(name) {
		return /^[A-Z][a-z]*$/.test(name);
	}
}
module.exports = solve;
